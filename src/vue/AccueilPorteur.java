package vue;

import modele.*;
import controleur.*;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * @version Prototype_1
 * @author GUAY Alexis Class AccueilPorteur correspond à la vue qui permettra
 * d'enregistrer un objet Porteur. La class est rélié au bouchon pour accéder à
 * la base de donnée provisoire et possède une collection de clubs qui sera
 * remplis lors de l'enregistrement et attribué avec toute les autre
 * informations à un Porteur qui sera créé et ajouté dans la collection de
 * Porteur du bouchon.
 */
public class AccueilPorteur extends javax.swing.JFrame {

    private Main link_main;

    ArrayList<Club> mesClubPorteur = new ArrayList<>();
    ArrayList<Club> lesClubs = new ArrayList<>();
    ArrayList<Porteur> lesPorteur = new ArrayList<>();

    /**
     *
     * @param link_main Constructeur de la vue AccueilPorteur avec liaison au
     * bouchon.
     */
    public AccueilPorteur(Main link_main) {
        this.link_main = link_main;

        lesClubs = link_main.getLesClubs();
        lesPorteur = link_main.getLesPorteurs();

        initComponents();

        New.setEnabled(false);

    }

    private AccueilPorteur() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        FieldLicence = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FieldNom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        FieldPrenom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        FieldClubMandateur = new javax.swing.JTextField();
        Enregistrer = new javax.swing.JButton();
        ListeClubPorteur = new javax.swing.JComboBox<>();
        SupprClubPorteur = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableClubPorteur = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Alerte = new javax.swing.JLabel();
        Retour = new javax.swing.JButton();
        New = new javax.swing.JButton();

        jLabel10.setText("jLabel10");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enregistrer un porteur");

        FieldLicence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldLicenceActionPerformed(evt);
            }
        });

        jLabel1.setText("n° licence");

        jLabel2.setText("nom");

        FieldNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldNomActionPerformed(evt);
            }
        });

        jLabel3.setText("prenom");

        FieldPrenom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldPrenomActionPerformed(evt);
            }
        });

        jLabel4.setText("club mandateur");

        FieldClubMandateur.setText("ex : A14001");
        FieldClubMandateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FieldClubMandateurActionPerformed(evt);
            }
        });

        Enregistrer.setText("Enregistrer");
        Enregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnregistrerActionPerformed(evt);
            }
        });

        ListeClubPorteur.setModel(new javax.swing.DefaultComboBoxModel<>(link_main.getcodeClub()));
        ListeClubPorteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListeClubPorteurActionPerformed(evt);
            }
        });

        SupprClubPorteur.setText("Supprimer");
        SupprClubPorteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupprClubPorteurActionPerformed(evt);
            }
        });

        TableClubPorteur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code club", "Nom club", "Nombre voix"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableClubPorteur);

        jLabel5.setText("Nombre de club total : ");

        jLabel6.setText("Nombre total de voie : ");

        jLabel7.setText("0");

        jLabel8.setText("0");

        Alerte.setBackground(new java.awt.Color(255, 255, 255));
        Alerte.setForeground(new java.awt.Color(255, 0, 0));
        Alerte.setText(".");

        Retour.setText("Retour");
        Retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RetourActionPerformed(evt);
            }
        });

        New.setText("Porteur suivant");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Enregistrer))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Retour)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(FieldLicence, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(FieldPrenom))
                                .addGap(95, 95, 95)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(FieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(FieldClubMandateur, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ListeClubPorteur, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(SupprClubPorteur))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(58, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(Alerte, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(New)
                .addGap(4, 4, 4))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Retour)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldLicence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(FieldNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(FieldPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(FieldClubMandateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ListeClubPorteur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SupprClubPorteur))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Enregistrer)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Alerte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(New)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @return le nombre de voix sous forme d'entier Récupère le nombre de
     * voixque possède le porteur en train de s'enregistrer, le nombre de voix
     * est calculé en ajoutant le nombre de voix que possède le club mandateur
     * indiqué et des différents clubs dont il porte les pouvoirs.
     */
    private int getNBvoix() {
        int nb_voix_total = 0;
        if (FieldClubMandateur.getText().isEmpty() == false) {
            if (lesClubs.contains(link_main.getClub(FieldClubMandateur.getText()))) {
                nb_voix_total = nb_voix_total + link_main.getClub(FieldClubMandateur.getText()).getNb_voix();
                for (Club leClub : mesClubPorteur) {
                    nb_voix_total = nb_voix_total + leClub.getNb_voix();
                }
            }
        }
        return nb_voix_total;
    }

    /**
     *
     * @return le nombre de club sous forme d'entier Récupère le nombre de clubs
     * représenté par le porteur en train de s'enregistrer, le nombre de club
     * est calculé en comptant le nombre de clubs dont il porte les pouvoirs et
     * son club mandateur.
     */
    private int getNBclub() {
        int nb_club_total = 1;
        nb_club_total = nb_club_total + mesClubPorteur.size();
        return nb_club_total;

    }

    /**
     * Actualise les compteurs de club et de voix du porteur.
     */
    private void refreshCompteur() {
        for (int i = 0; i < lesClubs.size(); i++) {
            // Actualise si le club mandateur est indiqué et si il existe afin de ne pas avoir d'erreur lors du calcul du nombre de voix.
            if (lesClubs.get(i).getCode_club().equals(FieldClubMandateur.getText())) {
                jLabel8.setText(Integer.toString(getNBclub()));
                jLabel7.setText(Integer.toString(getNBvoix()));
            }

        }
    }

    /**
     * Réinitialise tout le formulaire afin d'enregistrer le porteur suivant.
     */
    private void reinitialiseForm() {
        Alerte.setForeground(Color.red);
        Alerte.setText(".");
        FieldLicence.setText("");
        FieldNom.setText("");
        FieldPrenom.setText("");
        FieldClubMandateur.setText("ex : A14001");

        DefaultTableModel tm = (DefaultTableModel) TableClubPorteur.getModel();
        tm.setRowCount(0);
        jLabel8.setText("0");
        jLabel7.setText("0");
        mesClubPorteur.clear();
        TableClubPorteur.repaint();

    }

    /**
     *
     * @param evt qui correspond au clic sur le bouton enregistrer On effectue
     * plusieurs vérification sur les informations mis dans le formulaire avant
     * de pouvoir enregistrer le porteur.
     */
    private void EnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnregistrerActionPerformed

        if (FieldLicence.getText().isEmpty() == true || FieldNom.getText().isEmpty() == true || FieldPrenom.getText().isEmpty() == true || FieldClubMandateur.getText().isEmpty() == true) {
            Alerte.setText("Champ manquant");
        } // 2- Le porteur doit avec un nombre total de voix inférieur ou égal à 20 sinon l'enregistrement est invalide.
        else if (getNBvoix() > 20) {
            Alerte.setText("Nombre de voix supérieur à 20");
        } /* 3- Si le numéro du porteur est déjà présent dans la liste de porteur du bouchon, il s'agit donc d'un porteur qui viens finaliser sont enregistrement
            alors on modifie la liste de porteur qu'il possède pour lui attribuer la nouvelle.
         */ else if (lesPorteur.contains(link_main.getPorteur(FieldLicence.getText()))) {

            ArrayList<Club> listeprovi = new ArrayList<>();

            for (Club club : mesClubPorteur) {
                listeprovi.add(club);
            }
            link_main.modifPorteur(link_main.getPorteur(FieldLicence.getText()), FieldNom.getText().toUpperCase(), FieldPrenom.getText().toUpperCase(), FieldClubMandateur.getText().toUpperCase(), listeprovi);

            Alerte.setForeground(Color.green);
            Alerte.setText("Modification reussi");

            New.setEnabled(true);
            Enregistrer.setEnabled(false);

        } // 4- Si le club mandateur indiqué par le porteur n'est pas présent dans la collection de club l'enregistrement est invalide.
        else if (!lesClubs.contains(link_main.getClub(FieldClubMandateur.getText()))) {
            Alerte.setText("Club mandateur inconnu");
        } // 6- Si le club mandateur indiqué est aussi présent dans sa liste de club porteur l'enregistrement est invalide.
        else if (mesClubPorteur.contains(link_main.getClub(FieldClubMandateur.getText()))) {
            Alerte.setText("Club mandateur est dans la liste de club porteur");
        } else if (!(link_main.isCode(FieldClubMandateur.getText().toUpperCase())) || !(link_main.isCode(FieldLicence.getText().toUpperCase()))) {
            Alerte.setText("Numero de licence ou de club mandateur incorrect");
        }else if(link_main.getClub(FieldClubMandateur.getText().toUpperCase()).getId_porteur()!=null){
            Alerte.setText("club mandateur déjà porté");
        }

            // Si aucun des cas s'applique alors l'enregistrement du porteur est effectué.
        else {
            String licenceValue = FieldLicence.getText().toUpperCase();
            String nomValue = FieldNom.getText().toUpperCase();
            String prenomValue = FieldPrenom.getText().toUpperCase();
            String mandateValue = FieldClubMandateur.getText().toUpperCase();

            ArrayList<Club> listeprovi = new ArrayList<>();

            for (Club club : mesClubPorteur) {
                listeprovi.add(club);
            }

            link_main.enregistrementPorteur(new Porteur(licenceValue, nomValue, prenomValue, mandateValue, listeprovi));

            Alerte.setForeground(Color.green);
            Alerte.setText("Enregistrement reussi");

            New.setEnabled(true);
            Enregistrer.setEnabled(false);

        }
    }//GEN-LAST:event_EnregistrerActionPerformed

    /**
     *
     * @param evt correspond à un clic sur un élément de la liste déroulante.
     * Différents vérifications sont éfféctué avant de pouvoir ajouter un club à
     * la liste de club porteur.
     */
    private void ListeClubPorteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListeClubPorteurActionPerformed

        String club_choisi = (String) ListeClubPorteur.getSelectedItem();
        // 1- Si le club séléctionné est le même que le club mandateur indiqué l'ajout n'est pas effectué..
        if (club_choisi.equals(FieldClubMandateur.getText())) {
            Alerte.setText("Club porteur dèja mandateur");
        } // 2- Si le club séléctionné est déjà présent dans la liste de club porteur l'ajout n'est pas effectué.
        else if (mesClubPorteur.contains(link_main.getClub(club_choisi))) {
            Alerte.setText("Club déjà porteur");
        } // Si aucun des cas s'applique alors on ajoute le club séléctionné à la liste de club porteur.
        else {

            mesClubPorteur.add(link_main.getClub(club_choisi));

            String code_club = link_main.getClub(club_choisi).getCode_club();
            String nom_club = link_main.getClub(club_choisi).getNom_club();
            String nb_voix = Integer.toString(link_main.getClub(club_choisi).getNb_voix());

            DefaultTableModel tm = (DefaultTableModel) TableClubPorteur.getModel();
            tm.addRow(new Object[]{code_club, nom_club, nb_voix});

            TableClubPorteur.repaint();
            refreshCompteur();

        }

    }//GEN-LAST:event_ListeClubPorteurActionPerformed

    /**
     *
     * @param evt correspond à un clic sur le bouton supprimer Supprime un club
     * de la liste de club porteur du porteur.
     */
    private void SupprClubPorteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupprClubPorteurActionPerformed

        // Test si un club est bien séléctionné dans le tableau des clubs porteurs.
        if (!TableClubPorteur.getSelectionModel().isSelectionEmpty()) {

            DefaultTableModel tm = (DefaultTableModel) TableClubPorteur.getModel();
            // On retire de le club de la liste des clubs porteurs qui est en train d'être renseigné.
            mesClubPorteur.remove(link_main.getClub((String) tm.getValueAt(TableClubPorteur.getSelectedRow(), 0)));

            tm.removeRow(TableClubPorteur.getSelectedRow());

            refreshCompteur();
        }
    }//GEN-LAST:event_SupprClubPorteurActionPerformed

    /**
     *
     * @param evt correspond une validation du champ de text Si après avoir
     * renseigné le code du club mandateur, l'utilisateur appuis sur la touche
     * entrée on actualise les compteurs de club et de nombre de voix.
     */
    private void FieldClubMandateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldClubMandateurActionPerformed
        refreshCompteur();
    }//GEN-LAST:event_FieldClubMandateurActionPerformed

    // Rien de spécial est effectué ici.
    private void FieldNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldNomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldNomActionPerformed
    // Rien de spécial est effectué ici.
    private void FieldPrenomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldPrenomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FieldPrenomActionPerformed

    /**
     *
     * @param evt correspond à la validation du champ de text Si après avoir
     * renseigné le numéro de licence du porteur, l'utilisateur appuis sur la
     * touche entrée, le système va chercher dans la collection de porteur du
     * bouchon, si ce numéro de licence est connu, si c'est le cas, le
     * formulaire est rempli grâce au information connu sur le porteur.
     */
    private void FieldLicenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FieldLicenceActionPerformed

        DefaultTableModel tm = (DefaultTableModel) TableClubPorteur.getModel();

        String num_licence = FieldLicence.getText().toUpperCase();
        // Parcour la collection de porteur afin de voir si un porteur possède se numéro de licence.
        for (Porteur p : lesPorteur) {
            if (num_licence.equals(p.getLicence())) {
                reinitialiseForm();
                FieldLicence.setText(p.getLicence());
                FieldNom.setText(p.getNom_por());
                FieldPrenom.setText(p.getPre_por());
                FieldClubMandateur.setText(p.getClub_mandate());
                mesClubPorteur.clear();
                mesClubPorteur.addAll(p.getPorte_pouvoir());
                tm.setRowCount(0);
                for (Club c : mesClubPorteur) {
                    tm.addRow(new Object[]{c.getCode_club(), c.getNom_club(), c.getNb_voix()});
                }
                refreshCompteur();
                FieldLicence.setEnabled(false);

            }

        }


    }//GEN-LAST:event_FieldLicenceActionPerformed

    /**
     *
     * @param evt correspond à un clic sur le bouton retour Affiche la vue
     * Accueil et ferme la vue AccueilPorteur.
     */
    private void RetourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RetourActionPerformed
        Accueil acc = new Accueil(link_main);
        acc.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_RetourActionPerformed

    /**
     *
     * @param evt correspond à un clic sur le bouton porteur suivant
     * Réinitialise le formulaire et actualiste la liste présent dans la liste
     * déroulante pour afficher seulement les clubs disponibles afin
     * d'enregistrer un nouveau porteur.
     */
    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed

        reinitialiseForm();
        ListeClubPorteur.setModel(new javax.swing.DefaultComboBoxModel<>(link_main.getcodeClub()));
        New.setEnabled(false);
        Enregistrer.setEnabled(true);
        FieldLicence.setEnabled(true);

    }//GEN-LAST:event_NewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Alerte;
    private javax.swing.JButton Enregistrer;
    private javax.swing.JTextField FieldClubMandateur;
    private javax.swing.JTextField FieldLicence;
    private javax.swing.JTextField FieldNom;
    private javax.swing.JTextField FieldPrenom;
    private javax.swing.JComboBox<String> ListeClubPorteur;
    private javax.swing.JButton New;
    private javax.swing.JButton Retour;
    private javax.swing.JButton SupprClubPorteur;
    private javax.swing.JTable TableClubPorteur;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
